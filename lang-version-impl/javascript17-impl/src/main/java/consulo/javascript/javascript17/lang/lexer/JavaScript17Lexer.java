/* The following code was generated by JFlex 1.4.4 on 12.02.16 16:59 */

package consulo.javascript.javascript17.lang.lexer;

import consulo.language.lexer.LexerBase;
import consulo.language.ast.IElementType;
import com.intellij.lang.javascript.JSTokenTypes;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.4
 * on 12.02.16 16:59 from the specification file
 * <tt>R:/_github.com/consulo/consulo-javascript/javascript17-impl/src/org/mustbe/consulo/javascript/lang/lexer/javascript17.flex</tt>
 */
public class JavaScript17Lexer extends LexerBase {
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int DIV_OR_GT = 2;
    public static final int YYINITIAL = 0;
    public static final int LAST_STATE = 4;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
        "\11\5\1\3\1\16\1\0\1\3\1\10\16\5\4\0\1\3\1\54" +
            "\1\21\1\0\1\4\1\63\1\60\1\17\1\64\1\65\1\7\1\55" +
            "\1\71\1\15\1\13\1\6\1\11\7\1\2\1\1\74\1\70\1\56" +
            "\1\53\1\57\1\73\1\0\4\2\1\14\1\2\21\4\1\12\2\4" +
            "\1\22\1\20\1\23\1\62\1\4\1\0\1\33\1\41\1\43\1\37" +
            "\1\31\1\32\1\52\1\44\1\40\1\4\1\42\1\34\1\24\1\36" +
            "\1\45\1\50\1\4\1\27\1\35\1\26\1\30\1\51\1\47\1\25" +
            "\1\46\1\4\1\66\1\61\1\67\1\72\41\5\2\0\4\4\4\0" +
            "\1\4\2\0\1\5\7\0\1\4\4\0\1\4\5\0\27\4\1\0" +
            "\37\4\1\0\u013f\4\31\0\162\4\4\0\14\4\16\0\5\4\11\0" +
            "\1\4\21\0\130\5\5\0\23\5\12\0\1\4\13\0\1\4\1\0" +
            "\3\4\1\0\1\4\1\0\24\4\1\0\54\4\1\0\46\4\1\0" +
            "\5\4\4\0\202\4\1\0\4\5\3\0\105\4\1\0\46\4\2\0" +
            "\2\4\6\0\20\4\41\0\46\4\2\0\1\4\7\0\47\4\11\0" +
            "\21\5\1\0\27\5\1\0\3\5\1\0\1\5\1\0\2\5\1\0" +
            "\1\5\13\0\33\4\5\0\3\4\15\0\4\5\14\0\6\5\13\0" +
            "\32\4\5\0\13\4\16\5\7\0\12\5\4\0\2\4\1\5\143\4" +
            "\1\0\1\4\10\5\1\0\6\5\2\4\2\5\1\0\4\5\2\4" +
            "\12\5\3\4\2\0\1\4\17\0\1\5\1\4\1\5\36\4\33\5" +
            "\2\0\3\4\60\0\46\4\13\5\1\4\u014f\0\3\5\66\4\2\0" +
            "\1\5\1\4\20\5\2\0\1\4\4\5\3\0\12\4\2\5\2\0" +
            "\12\5\21\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0" +
            "\7\4\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5\2\0" +
            "\2\5\2\0\3\5\11\0\1\5\4\0\2\4\1\0\3\4\2\5" +
            "\2\0\12\5\4\4\15\0\3\5\1\0\6\4\4\0\2\4\2\0" +
            "\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0" +
            "\1\5\1\0\5\5\4\0\2\5\2\0\3\5\13\0\4\4\1\0" +
            "\1\4\7\0\14\5\3\4\14\0\3\5\1\0\11\4\1\0\3\4" +
            "\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5" +
            "\1\4\10\5\1\0\3\5\1\0\3\5\2\0\1\4\17\0\2\4" +
            "\2\5\2\0\12\5\1\0\1\4\17\0\3\5\1\0\10\4\2\0" +
            "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0" +
            "\1\5\1\4\6\5\3\0\2\5\2\0\3\5\10\0\2\5\4\0" +
            "\2\4\1\0\3\4\4\0\12\5\1\0\1\4\20\0\1\5\1\4" +
            "\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4" +
            "\1\0\2\4\3\0\2\4\3\0\3\4\3\0\10\4\1\0\3\4" +
            "\4\0\5\5\3\0\3\5\1\0\4\5\11\0\1\5\17\0\11\5" +
            "\11\0\1\4\7\0\3\5\1\0\10\4\1\0\3\4\1\0\27\4" +
            "\1\0\12\4\1\0\5\4\4\0\7\5\1\0\3\5\1\0\4\5" +
            "\7\0\2\5\11\0\2\4\4\0\12\5\22\0\2\5\1\0\10\4" +
            "\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0\1\5" +
            "\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5\7\0\1\4" +
            "\1\0\2\4\4\0\12\5\22\0\2\5\1\0\10\4\1\0\3\4" +
            "\1\0\27\4\1\0\20\4\4\0\6\5\2\0\3\5\1\0\4\5" +
            "\11\0\1\5\10\0\2\4\4\0\12\5\22\0\2\5\1\0\22\4" +
            "\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\5" +
            "\4\0\6\5\1\0\1\5\1\0\10\5\22\0\2\5\15\0\60\4" +
            "\1\5\2\4\7\5\4\0\10\4\10\5\1\0\12\5\47\0\2\4" +
            "\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4" +
            "\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4" +
            "\1\0\4\4\1\5\2\4\6\5\1\0\2\5\1\4\2\0\5\4" +
            "\1\0\1\4\1\0\6\5\2\0\12\5\2\0\2\4\42\0\1\4" +
            "\27\0\2\5\6\0\12\5\13\0\1\5\1\0\1\5\1\0\1\5" +
            "\4\0\2\5\10\4\1\0\42\4\6\0\24\5\1\0\2\5\4\4" +
            "\4\0\10\5\1\0\44\5\11\0\1\5\71\0\42\4\1\0\5\4" +
            "\1\0\2\4\1\0\7\5\3\0\4\5\6\0\12\5\6\0\6\4" +
            "\4\5\106\0\46\4\12\0\51\4\7\0\132\4\5\0\104\4\5\0" +
            "\122\4\6\0\7\4\1\0\77\4\1\0\1\4\1\0\4\4\2\0" +
            "\7\4\1\0\1\4\1\0\4\4\2\0\47\4\1\0\1\4\1\0" +
            "\4\4\2\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0" +
            "\1\4\1\0\4\4\2\0\7\4\1\0\7\4\1\0\27\4\1\0" +
            "\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\47\4\1\0" +
            "\23\4\16\0\11\5\56\0\125\4\14\0\u026c\4\2\0\10\4\12\0" +
            "\32\4\5\0\113\4\3\0\3\4\17\0\15\4\1\0\4\4\3\5" +
            "\13\0\22\4\3\5\13\0\22\4\2\5\14\0\15\4\1\0\3\4" +
            "\1\0\2\5\14\0\64\4\40\5\3\0\1\4\3\0\2\4\1\5" +
            "\2\0\12\5\41\0\3\5\2\0\12\5\6\0\130\4\10\0\51\4" +
            "\1\5\126\0\35\4\3\0\14\5\4\0\14\5\12\0\12\5\36\4" +
            "\2\0\5\4\u038b\0\154\4\224\0\234\4\4\0\132\4\6\0\26\4" +
            "\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4" +
            "\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4" +
            "\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4" +
            "\4\0\15\4\5\0\3\4\1\0\7\4\17\0\4\5\32\0\5\5" +
            "\20\0\2\4\23\0\1\4\13\0\4\5\6\0\6\5\1\0\1\4" +
            "\15\0\1\4\40\0\22\4\36\0\15\5\4\0\1\5\3\0\6\5" +
            "\27\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4" +
            "\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4\1\0\3\4" +
            "\1\0\7\4\3\0\3\4\5\0\5\4\26\0\44\4\u0e81\0\3\4" +
            "\31\0\11\4\6\5\1\0\5\4\2\0\5\4\4\0\126\4\2\0" +
            "\2\5\2\0\3\4\1\0\137\4\5\0\50\4\4\0\136\4\21\0" +
            "\30\4\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4\u0773\0" +
            "\u2ba4\4\u215c\0\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4\5\0" +
            "\1\4\1\5\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0" +
            "\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0" +
            "\66\4\50\0\15\4\3\0\20\5\20\0\4\5\17\0\2\4\30\0" +
            "\3\4\31\0\1\4\6\0\5\4\1\0\207\4\2\0\1\5\4\0" +
            "\1\4\13\0\12\5\7\0\32\4\4\0\1\4\1\0\32\4\12\0" +
            "\132\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4\3\0" +
            "\2\4\3\0\2\4\22\0\3\5\4\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
        "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2" +
            "\1\7\1\10\1\11\1\12\1\13\1\14\20\3\1\15" +
            "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
            "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35" +
            "\1\36\1\6\1\37\2\2\1\40\1\41\1\42\1\0" +
            "\1\40\1\2\1\43\1\44\2\11\2\12\20\3\1\45" +
            "\1\46\1\47\11\3\1\50\1\51\1\52\1\53\1\54" +
            "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64" +
            "\1\65\1\66\1\67\1\2\1\40\1\42\1\70\1\40" +
            "\2\0\2\11\2\12\1\3\1\71\11\3\1\72\1\73" +
            "\1\74\2\3\1\75\12\3\1\76\1\3\1\77\1\100" +
            "\1\101\1\102\1\103\1\104\1\0\2\70\1\105\1\3" +
            "\1\106\3\3\1\107\4\3\1\110\5\3\1\111\3\3" +
            "\1\112\1\3\1\113\1\114\1\42\1\0\1\115\4\3" +
            "\1\116\5\3\1\117\1\120\1\3\1\121\1\122\1\123" +
            "\1\124\1\125\3\3\1\126\1\3\1\127\4\3\1\130" +
            "\1\131\3\3\1\132\1\3\1\133\1\134\1\3\1\135";

    private static int[] zzUnpackAction() {
        int[] result = new int[226];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value;
            while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
        "\0\0\0\75\0\172\0\172\0\267\0\364\0\u0131\0\u016e" +
            "\0\172\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\172\0\172" +
            "\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487" +
            "\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f" +
            "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857" +
            "\0\172\0\172\0\172\0\172\0\172\0\172\0\172\0\172" +
            "\0\172\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02" +
            "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\172\0\172\0\172\0\u0b33" +
            "\0\u0b70\0\172\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde" +
            "\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6" +
            "\0\u0f03\0\u0f40\0\364\0\364\0\u0f7d\0\u0fba\0\u0ff7\0\u1034" +
            "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c" +
            "\0\172\0\172\0\172\0\u1259\0\172\0\172\0\172\0\172" +
            "\0\172\0\172\0\172\0\172\0\172\0\u1296\0\u12d3\0\u1310" +
            "\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8" +
            "\0\u1535\0\u1572\0\364\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3" +
            "\0\u16e0\0\u171d\0\u175a\0\u1797\0\364\0\364\0\364\0\u17d4" +
            "\0\u1811\0\364\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f" +
            "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\364\0\u1ab0\0\364\0\172" +
            "\0\172\0\172\0\u1aed\0\172\0\u1b2a\0\u1b67\0\172\0\364" +
            "\0\u1ba4\0\364\0\u1be1\0\u1c1e\0\u1c5b\0\364\0\u1c98\0\u1cd5" +
            "\0\u1d12\0\u1d4f\0\364\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80" +
            "\0\364\0\u1ebd\0\u1efa\0\u1f37\0\364\0\u1f74\0\364\0\172" +
            "\0\172\0\u1fb1\0\364\0\u1fee\0\u202b\0\u2068\0\u20a5\0\364" +
            "\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\364\0\364\0\u2213" +
            "\0\364\0\364\0\364\0\364\0\364\0\u2250\0\u228d\0\u22ca" +
            "\0\364\0\u2307\0\364\0\u2344\0\u2381\0\u23be\0\u23fb\0\364" +
            "\0\364\0\u2438\0\u2475\0\u24b2\0\364\0\u24ef\0\364\0\364" +
            "\0\u252c\0\364";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[226];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
        "\1\4\1\5\1\6\1\7\1\6\1\4\1\10\1\11" +
            "\1\7\1\12\1\6\1\13\1\6\1\14\1\7\1\15" +
            "\1\4\1\16\1\17\1\20\2\6\1\21\1\22\1\23" +
            "\1\24\1\25\1\6\1\26\1\27\1\30\1\31\1\32" +
            "\1\33\1\6\1\34\2\6\1\35\1\36\1\6\1\37" +
            "\1\40\1\41\1\42\1\43\1\4\1\44\1\45\1\46" +
            "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56" +
            "\1\57\1\60\1\61\1\4\1\5\1\6\1\7\1\6" +
            "\1\4\1\62\1\63\1\7\1\12\1\6\1\13\1\6" +
            "\1\14\1\7\1\15\1\4\1\16\1\17\1\20\2\6" +
            "\1\21\1\22\1\23\1\24\1\25\1\6\1\26\1\27" +
            "\1\30\1\31\1\32\1\33\1\6\1\34\2\6\1\35" +
            "\1\36\1\6\1\37\1\40\1\41\1\42\1\43\1\64" +
            "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53" +
            "\1\54\1\55\1\56\1\57\1\60\1\61\76\0\1\5" +
            "\7\0\1\5\1\0\1\65\1\66\14\0\1\66\44\0" +
            "\2\6\1\0\2\6\3\0\2\6\1\0\1\6\7\0" +
            "\27\6\25\0\1\7\4\0\1\7\5\0\1\7\56\0" +
            "\6\67\1\70\1\71\1\0\5\67\1\0\1\67\1\72" +
            "\1\67\1\73\52\67\1\0\1\5\7\0\1\5\1\74" +
            "\1\65\1\66\10\0\1\74\3\0\1\66\44\0\1\65" +
            "\7\0\1\65\100\0\1\75\35\0\1\76\21\0\10\15" +
            "\1\0\5\15\1\0\1\77\1\100\54\15\10\16\1\0" +
            "\5\16\1\0\1\16\1\101\1\102\53\16\1\0\2\6" +
            "\1\0\2\6\3\0\2\6\1\0\1\6\7\0\3\6" +
            "\1\103\14\6\1\104\1\6\1\105\4\6\23\0\2\6" +
            "\1\0\2\6\3\0\2\6\1\0\1\6\7\0\5\6" +
            "\1\106\21\6\23\0\2\6\1\0\2\6\3\0\2\6" +
            "\1\0\1\6\7\0\12\6\1\107\14\6\23\0\2\6" +
            "\1\0\2\6\3\0\2\6\1\0\1\6\7\0\10\6" +
            "\1\110\16\6\23\0\2\6\1\0\2\6\3\0\2\6" +
            "\1\0\1\6\7\0\4\6\1\111\2\6\1\112\4\6" +
            "\1\113\4\6\1\114\5\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\5\6\1\115\21\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\5\6\1\116\15\6\1\117\3\6\23\0\2\6" +
            "\1\0\2\6\3\0\2\6\1\0\1\6\7\0\4\6" +
            "\1\120\1\121\21\6\23\0\2\6\1\0\2\6\3\0" +
            "\2\6\1\0\1\6\7\0\5\6\1\122\13\6\1\123" +
            "\5\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\6\6\1\124\3\6\1\125\14\6\23\0" +
            "\2\6\1\0\2\6\3\0\2\6\1\0\1\6\7\0" +
            "\3\6\1\126\23\6\23\0\2\6\1\0\2\6\3\0" +
            "\2\6\1\0\1\6\7\0\7\6\1\127\11\6\1\130" +
            "\5\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\14\6\1\131\12\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\14\6\1\132" +
            "\3\6\1\133\6\6\23\0\2\6\1\0\2\6\3\0" +
            "\2\6\1\0\1\6\7\0\7\6\1\134\11\6\1\135" +
            "\5\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\5\6\1\136\21\6\75\0\1\137\74\0" +
            "\1\140\74\0\1\141\1\0\1\142\72\0\1\143\3\0" +
            "\1\144\70\0\1\145\4\0\1\146\67\0\1\147\5\0" +
            "\1\150\66\0\1\151\74\0\1\152\27\0\1\70\1\71" +
            "\43\0\1\153\74\0\1\154\74\0\1\155\2\0\1\156" +
            "\17\0\1\65\7\0\1\65\2\0\1\66\14\0\1\66" +
            "\44\0\1\157\7\0\1\157\3\0\1\157\37\0\1\157" +
            "\17\0\6\67\1\160\1\67\1\0\5\67\1\0\1\67" +
            "\1\72\1\67\1\73\52\67\10\70\1\0\5\70\1\0" +
            "\56\70\7\161\1\162\65\161\10\67\1\0\5\67\1\0" +
            "\56\67\6\73\1\163\1\73\1\164\5\73\1\164\1\73" +
            "\1\165\2\73\1\67\51\73\1\0\2\74\6\0\1\74" +
            "\2\0\1\74\14\0\3\74\3\0\1\74\1\0\1\74" +
            "\1\0\1\74\31\0\3\15\1\166\4\15\1\167\64\15" +
            "\3\16\1\170\4\16\1\171\64\16\1\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\4\6\1\172" +
            "\15\6\1\173\4\6\23\0\2\6\1\0\2\6\3\0" +
            "\2\6\1\0\1\6\7\0\3\6\1\174\10\6\1\175" +
            "\12\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\24\6\1\176\2\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\2\6\1\177" +
            "\24\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\13\6\1\200\13\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\11\6\1\201" +
            "\15\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\12\6\1\202\14\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\10\6\1\203" +
            "\16\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\12\6\1\204\14\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\3\6\1\205" +
            "\23\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\2\6\1\206\24\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\2\6\1\207" +
            "\24\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\14\6\1\210\12\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\10\6\1\211" +
            "\16\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\23\6\1\212\3\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\6\6\1\213" +
            "\1\6\1\214\16\6\23\0\2\6\1\0\2\6\3\0" +
            "\2\6\1\0\1\6\7\0\11\6\1\215\15\6\23\0" +
            "\2\6\1\0\2\6\3\0\2\6\1\0\1\6\7\0" +
            "\5\6\1\216\21\6\23\0\2\6\1\0\2\6\3\0" +
            "\2\6\1\0\1\6\7\0\2\6\1\217\6\6\1\220" +
            "\15\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\12\6\1\221\14\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\5\6\1\222" +
            "\21\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\2\6\1\223\24\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\14\6\1\224" +
            "\12\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\3\6\1\225\23\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\14\6\1\226" +
            "\12\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\2\6\1\227\24\6\75\0\1\230\74\0" +
            "\1\231\74\0\1\232\3\0\1\233\70\0\1\234\22\0" +
            "\1\157\7\0\1\157\107\0\2\160\12\0\1\160\11\0" +
            "\1\160\22\0\7\161\1\235\65\161\6\236\1\237\1\162" +
            "\65\236\23\164\1\67\2\163\12\164\1\163\11\164\1\163" +
            "\45\164\1\67\51\164\10\73\1\164\5\73\1\164\4\73" +
            "\1\67\51\73\3\15\1\166\4\15\1\167\6\15\1\77" +
            "\1\100\64\15\1\0\6\15\1\77\1\100\54\15\3\16" +
            "\1\170\4\16\1\171\7\16\1\101\1\102\63\16\1\0" +
            "\7\16\1\101\1\102\53\16\1\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\5\6\1\240\21\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\21\6\1\241\5\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\11\6\1\242\15\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\5\6\1\243\21\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\4\6\1\244\22\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\5\6\1\245\21\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\5\6\1\246\21\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\17\6\1\247\7\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\11\6\1\250\15\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\7\6\1\251\17\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\2\6\1\252\24\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\10\6\1\253\16\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\7\6\1\254\17\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\5\6\1\255\21\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\2\6\1\256\24\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\7\6\1\257\17\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\17\6\1\260\7\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\5\6\1\261\21\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\2\6\1\262\6\6" +
            "\1\263\15\6\23\0\2\6\1\0\2\6\3\0\2\6" +
            "\1\0\1\6\7\0\10\6\1\264\16\6\23\0\2\6" +
            "\1\0\2\6\3\0\2\6\1\0\1\6\7\0\20\6" +
            "\1\265\6\6\23\0\2\6\1\0\2\6\3\0\2\6" +
            "\1\0\1\6\7\0\10\6\1\266\16\6\23\0\2\6" +
            "\1\0\2\6\3\0\2\6\1\0\1\6\7\0\13\6" +
            "\1\267\13\6\75\0\1\270\21\0\6\161\1\271\1\235" +
            "\65\161\7\236\1\272\65\236\1\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\23\6\1\273\3\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\21\6\1\274\5\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\3\6\1\275\23\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\6\6\1\276\20\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\2\6\1\277\24\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\5\6\1\300\21\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\10\6\1\301\16\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\17\6\1\302\7\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\4\6\1\303\22\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\2\6\1\304\24\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\7\6\1\305\17\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\16\6\1\306\10\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\20\6\1\307\6\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\14\6\1\310\12\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\2\6\1\311\24\6" +
            "\23\0\2\6\1\0\2\6\3\0\2\6\1\0\1\6" +
            "\7\0\13\6\1\312\13\6\23\0\2\6\1\0\2\6" +
            "\3\0\2\6\1\0\1\6\7\0\5\6\1\313\21\6" +
            "\22\0\6\236\1\237\1\272\65\236\1\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\6\6\1\314" +
            "\20\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\12\6\1\315\14\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\14\6\1\316" +
            "\12\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\14\6\1\317\12\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\10\6\1\320" +
            "\16\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\20\6\1\321\6\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\10\6\1\322" +
            "\16\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\5\6\1\323\21\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\12\6\1\324" +
            "\14\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\12\6\1\325\14\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\12\6\1\326" +
            "\14\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\21\6\1\327\5\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\22\6\1\330" +
            "\4\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\2\6\1\331\24\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\17\6\1\332" +
            "\7\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\4\6\1\333\22\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\5\6\1\334" +
            "\21\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\12\6\1\335\14\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\5\6\1\336" +
            "\21\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\5\6\1\337\21\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\13\6\1\340" +
            "\13\6\23\0\2\6\1\0\2\6\3\0\2\6\1\0" +
            "\1\6\7\0\21\6\1\341\5\6\23\0\2\6\1\0" +
            "\2\6\3\0\2\6\1\0\1\6\7\0\6\6\1\342" +
            "\20\6\22\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[9577];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value;
            while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final char[] EMPTY_BUFFER = new char[0];
    private static final int YYEOF = -1;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
        "\2\0\1\10\1\11\4\1\1\11\5\1\2\11\30\1" +
            "\11\11\10\1\1\0\2\1\3\11\2\1\1\11\36\1" +
            "\3\11\1\1\11\11\6\1\2\0\42\1\3\11\1\1" +
            "\1\11\1\0\1\1\1\11\30\1\2\11\1\0\50\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[226];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    private IElementType myTokenType;
    private int myState;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 1772) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value;
            while (--count > 0);
        }
        return map;
    }

    @Override
    public IElementType getTokenType() {
      if (myTokenType == null) {
        locateToken();
      }
        return myTokenType;
    }

    @Override
    public final int getTokenStart() {
      if (myTokenType == null) {
        locateToken();
      }
        return zzStartRead;
    }

    @Override
    public final int getTokenEnd() {
      if (myTokenType == null) {
        locateToken();
      }
        return getTokenStart() + yylength();
    }

    @Override
    public void advance() {
      if (myTokenType == null) {
        locateToken();
      }
        myTokenType = null;
    }

    @Override
    public int getState() {
      if (myTokenType == null) {
        locateToken();
      }
        return myState;
    }

    @Override
    public void start(final CharSequence buffer, int startOffset, int endOffset, final int initialState) {
        reset(buffer, startOffset, endOffset, initialState);
        myTokenType = null;
    }

    @Override
    public CharSequence getBufferSequence() {
        return zzBuffer;
    }

    @Override
    public int getBufferEnd() {
        return zzEndRead;
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
        myTokenType = null;
    }

    private void locateToken() {
      if (myTokenType != null) {
        return;
      }
        try {
            myState = yystate();
            myTokenType = advanceImpl();
        }
        catch (java.io.IOException e) { /*Can't happen*/ }
        catch (Error e) {
            // add lexer class name to the error
            final Error error = new Error(getClass().getName() + ": " + e.getMessage());
            error.setStackTrace(e.getStackTrace());
            throw error;
        }
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
      if (number > yylength()) {
        zzScanError(ZZ_PUSHBACK_2BIG);
      }

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advanceImpl() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                  if (zzCurrentPosL < zzEndReadL) {
                    zzInput = zzBufferL.charAt(zzCurrentPosL++);
                  }
                  else if (zzAtEOF) {
                    zzInput = YYEOF;
                    break zzForAction;
                  }
                  else {
                    // store back cached positions
                    zzCurrentPos = zzCurrentPosL;
                    zzMarkedPos = zzMarkedPosL;
                    boolean eof = zzRefill();
                    // get translated positions and possibly new buffer
                    zzCurrentPosL = zzCurrentPos;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    zzEndReadL = zzEndRead;
                    if (eof) {
                      zzInput = YYEOF;
                      break zzForAction;
                    }
                    else {
                      zzInput = zzBufferL.charAt(zzCurrentPosL++);
                    }
                  }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                  if (zzNext == -1) {
                    break zzForAction;
                  }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                      if ((zzAttributes & 8) == 8) {
                        break zzForAction;
                      }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 90: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.FUNCTION_KEYWORD;
                }
                case 94:
                    break;
                case 29: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.COLON;
                }
                case 95:
                    break;
                case 4: {
                    return JSTokenTypes.WHITE_SPACE;
                }
                case 96:
                    break;
                case 32: {
                    return JSTokenTypes.REGEXP_LITERAL;
                }
                case 97:
                    break;
                case 83: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.WHILE_KEYWORD;
                }
                case 98:
                    break;
                case 21: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.LPAR;
                }
                case 99:
                    break;
                case 69: {
                    yybegin(DIV_OR_GT);
                    return JSTokenTypes.TRUE_KEYWORD;
                }
                case 100:
                    break;
                case 44: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.GE;
                }
                case 101:
                    break;
                case 86: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.SWITCH_KEYWORD;
                }
                case 102:
                    break;
                case 34: {
                    return JSTokenTypes.C_STYLE_COMMENT;
                }
                case 103:
                    break;
                case 49: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.OROR;
                }
                case 104:
                    break;
                case 56: {
                    return JSTokenTypes.DOC_COMMENT;
                }
                case 105:
                    break;
                case 58: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.FOR_KEYWORD;
                }
                case 106:
                    break;
                case 66: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.GTGTEQ;
                }
                case 107:
                    break;
                case 26: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.COMMA;
                }
                case 108:
                    break;
                case 13: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.EQ;
                }
                case 109:
                    break;
                case 37: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.DO_KEYWORD;
                }
                case 110:
                    break;
                case 47: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.ANDAND;
                }
                case 111:
                    break;
                case 43: {
                    return JSTokenTypes.PLUSPLUS;
                }
                case 112:
                    break;
                case 10: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.STRING_LITERAL;
                }
                case 113:
                    break;
                case 3: {
                    yybegin(DIV_OR_GT);
                    return JSTokenTypes.IDENTIFIER;
                }
                case 114:
                    break;
                case 5: {
                    return JSTokenTypes.DIV;
                }
                case 115:
                    break;
                case 25: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.SEMICOLON;
                }
                case 116:
                    break;
                case 50: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.XOREQ;
                }
                case 117:
                    break;
                case 84: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.TYPEOF_KEYWORD;
                }
                case 118:
                    break;
                case 71: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.ELSE_KEYWORD;
                }
                case 119:
                    break;
                case 68: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.LTLTEQ;
                }
                case 120:
                    break;
                case 57: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.TRY_KEYWORD;
                }
                case 121:
                    break;
                case 6: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.MULT;
                }
                case 122:
                    break;
                case 53: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.MULTEQ;
                }
                case 123:
                    break;
                case 17: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.AND;
                }
                case 124:
                    break;
                case 60: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.SET_KEYWORD;
                }
                case 125:
                    break;
                case 64: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.EQEQEQ;
                }
                case 126:
                    break;
                case 70: {
                    yybegin(DIV_OR_GT);
                    return JSTokenTypes.THIS_KEYWORD;
                }
                case 127:
                    break;
                case 36: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.MINUSEQ;
                }
                case 128:
                    break;
                case 52: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.DIVEQ;
                }
                case 129:
                    break;
                case 63: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.GET_KEYWORD;
                }
                case 130:
                    break;
                case 62: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.VAR_KEYWORD;
                }
                case 131:
                    break;
                case 15: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.PLUS;
                }
                case 132:
                    break;
                case 33: {
                    return JSTokenTypes.END_OF_LINE_COMMENT;
                }
                case 133:
                    break;
                case 72: {
                    yybegin(DIV_OR_GT);
                    return JSTokenTypes.NULL_KEYWORD;
                }
                case 134:
                    break;
                case 80: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.CATCH_KEYWORD;
                }
                case 135:
                    break;
                case 40: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.EQEQ;
                }
                case 136:
                    break;
                case 1: {
                    return JSTokenTypes.BAD_CHARACTER;
                }
                case 137:
                    break;
                case 88: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.FINALLY_KEYWORD;
                }
                case 138:
                    break;
                case 87: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.DELETE_KEYWORD;
                }
                case 139:
                    break;
                case 77: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.THROW_KEYWORD;
                }
                case 140:
                    break;
                case 81: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.CONST_KEYWORD;
                }
                case 141:
                    break;
                case 46: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.ANDEQ;
                }
                case 142:
                    break;
                case 55: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.LTLT;
                }
                case 143:
                    break;
                case 31: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.LT;
                }
                case 144:
                    break;
                case 75: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.VOID_KEYWORD;
                }
                case 145:
                    break;
                case 14: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.EXCL;
                }
                case 146:
                    break;
                case 38: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.IF_KEYWORD;
                }
                case 147:
                    break;
                case 65: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.NEQEQ;
                }
                case 148:
                    break;
                case 42: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.PLUSEQ;
                }
                case 149:
                    break;
                case 48: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.OREQ;
                }
                case 150:
                    break;
                case 91: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.CONTINUE_KEYWORD;
                }
                case 151:
                    break;
                case 67: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.GTGTGT;
                }
                case 152:
                    break;
                case 45: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.GTGT;
                }
                case 153:
                    break;
                case 27: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.TILDE;
                }
                case 154:
                    break;
                case 89: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.DEFAULT_KEYWORD;
                }
                case 155:
                    break;
                case 59: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.LET_KEYWORD;
                }
                case 156:
                    break;
                case 2: {
                    yybegin(DIV_OR_GT);
                    return JSTokenTypes.NUMERIC_LITERAL;
                }
                case 157:
                    break;
                case 19: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.XOR;
                }
                case 158:
                    break;
                case 30: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.DIV;
                }
                case 159:
                    break;
                case 16: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.GT;
                }
                case 160:
                    break;
                case 39: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.IN_KEYWORD;
                }
                case 161:
                    break;
                case 85: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.RETURN_KEYWORD;
                }
                case 162:
                    break;
                case 82: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.YIELD_KEYWORD;
                }
                case 163:
                    break;
                case 61: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.NEW_KEYWORD;
                }
                case 164:
                    break;
                case 78: {
                    yybegin(DIV_OR_GT);
                    return JSTokenTypes.FALSE_KEYWORD;
                }
                case 165:
                    break;
                case 9: {
                    return JSTokenTypes.SINGLE_QUOTE_STRING_LITERAL;
                }
                case 166:
                    break;
                case 18: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.OR;
                }
                case 167:
                    break;
                case 51: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.PERCEQ;
                }
                case 168:
                    break;
                case 8: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.MINUS;
                }
                case 169:
                    break;
                case 35: {
                    return JSTokenTypes.MINUSMINUS;
                }
                case 170:
                    break;
                case 28: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.QUEST;
                }
                case 171:
                    break;
                case 79: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.BREAK_KEYWORD;
                }
                case 172:
                    break;
                case 7: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.DOT;
                }
                case 173:
                    break;
                case 73: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.CASE_KEYWORD;
                }
                case 174:
                    break;
                case 12: {
                    yybegin(DIV_OR_GT);
                    return JSTokenTypes.RBRACKET;
                }
                case 175:
                    break;
                case 24: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.RBRACE;
                }
                case 176:
                    break;
                case 93: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.INSTANCEOF_KEYWORD;
                }
                case 177:
                    break;
                case 41: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.NE;
                }
                case 178:
                    break;
                case 23: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.LBRACE;
                }
                case 179:
                    break;
                case 22: {
                    yybegin(DIV_OR_GT);
                    return JSTokenTypes.RPAR;
                }
                case 180:
                    break;
                case 20: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.PERC;
                }
                case 181:
                    break;
                case 74: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.WITH_KEYWORD;
                }
                case 182:
                    break;
                case 54: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.LE;
                }
                case 183:
                    break;
                case 11: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.LBRACKET;
                }
                case 184:
                    break;
                case 76: {
                    yybegin(YYINITIAL);
                    return JSTokenTypes.GTGTGTEQ;
                }
                case 185:
                    break;
                case 92: {
                    yybegin(DIV_OR_GT);
                    return JSTokenTypes.UNDEFINED_KEYWORD;
                }
                case 186:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        return null;
                    }
                    else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }
}
