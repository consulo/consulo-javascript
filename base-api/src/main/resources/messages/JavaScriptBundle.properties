javascript.filetype.description=JavaScript files
typescript.filetype.description=TypeScript files

#language terms
javascript.language.term.function=function
javascript.language.term.class=class
javascript.language.term.namespace=namespace
javascript.language.term.parameter=parameter
javascript.language.term.property=property
javascript.language.term.variable=variable
javascript.language.term.value=value
javascript.language.term.tag=tag
javascript.language.term.label=label
javascript.language.term.prototype=prototype

#parser error messages
javascript.parser.message.expected.expression=expression expected
javascript.parser.message.expected.xml.element=xml element expected
javascript.parser.property.expected=property expected
javascript.parser.message.expected.lbrace={ expected
javascript.parser.message.expected.rbrace=} expected
javascript.parser.message.expected.identifier.string.literal.or.numeric.literal=identifier or string literal or numeric literal expected
javascript.parser.message.expected.colon=: expected
javascript.parser.message.expected.semicolon=; expected
javascript.parser.message.expected.rbracket=] expected
javascript.parser.message.expected.lparen=( expected
javascript.parser.message.expected.rparen=) expected
javascript.parser.message.expected.name=name expected
javascript.parser.message.expected.comma.or.rparen=, or ) expected
javascript.parser.message.expected.function.name=function name expected
javascript.parser.message.expected.formal.parameter.name=formal parameter name expected
javascript.parser.message.expected.statement=statement expected
javascript.parser.message.expected.parameter.name=parameter name expected
javascript.parser.message.expected.catch.or.default=catch or default expected
javascript.parser.message.expected.forloop.left.hand.side.expression.or.variable.declaration=left hand side expression or variable declaration expected before 'in'
javascript.parser.message.expected.forloop.in.or.semicolon='in' or ; expected
javascript.parser.message.expected.forloop.in.of.or.semicolon='in', 'of' or ; expected
javascript.parser.message.expected.while.keyword=while expected
javascript.parser.message.expected.comma=, expected
javascript.parser.message.expected.variable.name=variable name expected
javascript.parser.message.missing.rbrace=missing }
javascript.parser.message.unexpected.end.of.file=unexpected end of file
javascript.parser.message.unclosed.string.literal=Unclosed string literal

#validation messages
javascript.validation.message.duplicate.declaration=Duplicate declaration
javascript.validation.message.assignment.to.const=Attempt to assign to const variable
javascript.validation.message.arguments.out.of.function=Using function arguments object outside function
javascript.validation.message.must.be.lvalue=Must be lvalue
javascript.validation.message.const.variable.without.initializer.=const variable without initializer. It won't be possible to assign meaningful value later.
javascript.validation.message.continue.without.target=Cannot determine target for 'continue'
javascript.validation.message.break.without.target=Cannot determine target for 'break'
javascript.validation.message.return.outside.function.definition='return' outside function definition
javascript.validation.message.duplicate.label=Duplicate label

#surround with names
javascript.surround.with.do.while=do / while
javascript.surround.with.for=for
javascript.surround.with.if=if
javascript.surround.with.if.else=if / else
javascript.surround.with.parenthesis=(expr)
javascript.surround.with.try.catch=try / catch
javascript.surround.with.try.finally=try / finally
javascript.surround.with.try.catch.finally=try / catch / finally
javascript.surround.with.while=while
javascript.surround.with.with=with
javascript.surround.with.function=function
javascript.surround.with.function.expression=function expression

javascript.introduce.variable.title=Introduce Variable
javascript.introduce.variable.error.no.expression.selected=Cannot introduce variable.\nSelection does not form an expression.
javascript.introduce.variable.name.prompt=&Name:
javascript.introduce.variable.replace.all.occurrences=Replace &all occurrences ({0} occurrences found)
javascript.introduce.variable.invalid.name=Please enter a valid name.
javascript.introduce.variable.variable.already.exists=Variable with name {0} already exists in the scope.
javascript.introduce.variable.function.already.exists=Function with name {0} already exists in the scope.

javascript.introduce.field.title=Introduce Field
javascript.introduce.field.error.no.expression.selected=Cannot introduce field.\nSelection does not form an expression.
javascript.introduce.constant.title=Introduce Constant
javascript.introduce.constant.error.no.expression.selected=Cannot introduce constant.\nSelection does not form an expression.
javascript.introduce.constant.error.not.constant.expression.selected=Cannot introduce constant.\nSelection is not constant expression.

#Highlighting categories
javascript.keyword=Keyword
javascript.string=String
javascript.number=Number
javascript.linecomment=Line comment
javascript.doccomment=Doc comment
javascript.blockcomment=Block comment
javascript.regexp=Regular expression
javascript.operation=Operation
javascript.parens=Parenthesis
javascript.brackets=Brackets
javascript.braces=Braces
javascript.semicolon=Semicolon
javascript.badcharacter=Bad character
javascript.docmarkup=Documentation markup
javascript.doctag=Documentation tag
javascript.valid.string.escape=Valid string escape
javascript.invalid.string.escape=Invalid string escape
javascript.comma=Comma
javascript.dot=Dot

building.index.message=Building JavaScript indices
loading.index.message=Loading JavaScript indices

#errors with intentions
javascript.unresolved.function.name.message=Unresolved function or method {0}() #loc
javascript.unresolved.variable.name.message=Unresolved variable {0} #loc
javascript.unresolved.type.name.message=Unresolved type {0} #loc
javascript.unresolved.variable.or.type.name.message=Unresolved variable or type {0} #loc
javascript.unresolved.variable.or.type.name.message2=Unresolved variable or type {0}
javascript.undeclared.variable.name.message=Variable {0} implicitly declared #loc
javascript.create.function.intention.name=Create Function {0}
javascript.create.variable.intention.name=Create Variable {0}
javascript.create.constant.intention.name=Create Constant {0}
javascript.declare.variable.intention.name=Insert Var Declaration for {0}
javascript.create.namespace.intention.name=Create Namespace {0}
javascript.create.property.intention.name=Create Field {0}
javascript.create.constant.field.intention.name=Create Constant Field {0}
javascript.create.method.intention.name=Create Method {0}
javascript.create.get.property.intention.name=Create Get Property {0}
javascript.create.set.property.intention.name=Create Set Property {0}
javascript.create.function.intention.family=Create JavaScript Function or Method
javascript.create.variable.intention.family=Create JavaScript Variable Or Property
js.inspection.group.name=JavaScript
js.unresolved.variable.inspection.name=Unresolved JavaScript variable
js.undeclared.variable.inspection.name=Implicitly declared JavaScript variable
js.duplicated.declaration.inspection.name=Duplicated JavaScript declaration
js.unused.local.symbol.inspection.name=Unused JavaScript local symbol
js.unresolved.function.inspection.name=Unresolved JavaScript function
js.deprecated.symbols.inspection.name=Deprecated JavaScript symbol
javascript.parser.message.expected.typename=* or type name expected
javascript.parser.message.expected.name.or.lbrace=Expected package name or {
javascript.parser.message.expected.function.var.class.interface.namespace=Expected function, variable, class, interface or namespace declaration
interface.function.declaration.should.have.no.body=Interface functions declaration should have no body
javascript.parser.message.expected.namespace=Namespace keyword expected
javascript.parser.message.expected.string.literal=String literal expected
javascript.parser.message.expected.xml=xml context keyword expected
javascript.parser.message.expected.equal=expected =
javascript.parser.message.expected.lbrace.or.lbracket={ or [ expected
javascript.parser.message.expected.eof=End of file expected
javascript.deprecated.symbol.used.name.message=Deprecated symbol used, consult docs for better alternative #loc
js.classname.macro.description=jsClassName()
js.methodname.macro.description=jsMethodName()
js.unused.parameter=Unused parameter
js.unused.function.declaration=Unused function declaration
js.unused.local.variable=Unused local variable declaration
js.unused.symbol.remove=Remove unused symbol
javascript.parser.message.expected.identifier=Expected identifier
javascript.parser.message.expected.instanceof=Expected instanceof
javascript.parser.message.expected.value=value expected
javascript.parser.message.expected.identifer.or.value=Identifier or value expected
js.show.overriding.markers.inspection.name=Shows function overriding markers in JavaScript
js.untyped.declaration.inspection.name=Declaration with no type
js.untyped.variable.problem=Variable {0} has no type
js.untyped.function.problem=Function {0} has no return type
js.untyped.declaration.problem.addtype.fix=Add Type to Declaration
invalid.identifier.value=invalid identifier value
javascript.validation.message.this.referenced.from.static.context='this' referenced in static context
javascript.validation.message.super.referenced.without.class.instance.context='super' referenced without class instance context
javascript.validation.message.super.referenced.from.static.context='super' referenced in static context
javascript.validation.message.function.override.without.override.modifier=Method overrides method in superclass {0} without override keyword
javascript.language.term.attribute.value=Attribute value
javascript.validation.message.class.should.be.in.file=Class ''{0}'' should be defined in file ''{1}''
javascript.validation.message.function.should.be.in.file=Function ''{0}'' should be defined in file ''{1}''
javascript.validation.message.namespace.should.be.in.file=Namespace ''{0}'' should be defined in file ''{1}''
javascript.validation.message.variable.should.be.in.file=Variable ''{0}'' should be defined in file ''{1}''
javascript.validation.message.incorrect.package.name=Package name ''{0}'' does not correspond to file path ''{1}''
javascript.fix.package.name=Set package name to ''{0}''
javascript.fix.add.override.modifier=Add override modifier
js.code.style.tab.name=JavaScript / ECMAScript / ActionScript
to.indent.package.statement.children=&Indent package statement children
javascript.formatting.options.panel.title=Formatting options
preview.panel.title=Preview

javascript.validation.message.interface.members.cannot.have.access.modifiers=Interface members cannot have access modifiers
javascript.template.context.type=Java Sc&ript
flex.import.class=Import Class {0}
flex.import.function=Import Function {0}
interface.should.have.no.variable.declarations=Interface should have no variable declarations
javascript.validation.message.implements.for.interface.not.allowed=Implements list is not allowed for interface
javascript.validation.message.interface.name.expected.here=Interface name expected here
javascript.validation.message.class.name.expected.here=Class name expected here
javascript.validation.message.circular.dependency=Circular dependency
javascript.fix.remove.circular.dependency=Remove circular dependency
javascript.validation.message.more.than.one.externally.visible.symbol=More than one externally visible symbol defined in file
javascript.validation.message.interface.method.not.implemented=Method {0} from interface {1} is not implemented
javascript.fix.remove.externally.visible.symbol=Remove externally visible symbol
javascript.fix.implement.methods=Implement Methods
javascript.parameter=Parameter
javascript.local.variable=Local variable
javascript.global.variable=Global variable
javascript.global.function=Global function
javascript.static.member.function=Static member function
javascript.static.member.variable=Static member variable
javascript.instance.member.variable=Instance member variable
javascript.instance.member.function=Instance member function
javascript.create.class.intention.name=Create Class {0}
javascript.create.interface.intention.name=Create Interface {0}
create.class.dialog.title=Create Class
create.interface.dialog.title=Create Interface
choose.class.title=Choose Class
javascript.fix.remove.override.modifier=Remove override modifier
javascript.validation.message.function.override.for.object.method=Method inherited from Object does not need override
javascript.validation.message.function.override.without.parent.method=Method does not override method from super class
javascript.parser.message.expected.lt=Expected >

generate.constructor.fields.chooser.title=Choose Fields to Initialize by Constructor
generate.getter.setter.chooser.title=Select Fields to Generate Getters and Setters
generate.to.string.chooser.title=Select Fields to Use in toString function
generate.getter.fields.chooser.title=Select Fields to Generate Getters
generate.setter.fields.chooser.title=Select Fields to Generate Setters
methods.to.implement.chooser.title=Select Methods to Implement
methods.to.override.chooser.title=Select Methods to Override
use.semicolon.to.terminate.statement=Use &semicolon to terminate statements
javascript.validation.unused.import=Unused import
javascript.fix.optimize.imports=Optimize imports
javascript.parser.message.expected.doc.tag.value=Expected doc tag value
javascript.validation.message.incorrect.tag.value=Incorrect Tag Value
javascript.validation.message.incorrect.parameter.name=Incorrect parameter name
javascript.parser.message.expected.doc.tag.name=Expected doc tag name
javascript.invalid.number.of.parameters=Invalid number of parameters, expected {0}
javascript.argument.type.mismatch=Argument type {1} is not assignable to parameter type {0}
javascript.initializer.type.mismatch=Initializer type {1} is not assignable to variable type {0}
javascript.binary.operand.type.mismatch=Binary operation argument type {1} is not assignable to type {0}
javascript.incorrect.variable.type.mismatch=Variable type {1} is not assignable to type {0}
javascript.term.does.not.evaluate.to.function=Method expression is not of Function type
javascript.term.does.not.evaluate.to.function2=Property can not be invoked as function
javascript.term.does.not.evaluate.to.function2.fix=Remove argument list
javascript.assigned.expression.type.mismatch=Assigned expression type {1} is not assignable to type {0}
javascript.returned.expression.type.mismatch=Returned expression type {1} is not assignable to type {0}
javascript.insert.cast.fix=Insert cast
javascript.introduce.constant.error.not.available.in.javascript.code=Introduce Constant is not available in JavaScript code
javascript.introduce.field.error.not.available.in.javascript.code=Introduce Field is not available in JavaScript code
javascript.extract.method.title=Extract Function
javascript.validation.message.function.override.incompatible.access.modifier=Incompatible override, should have ''{0}'' access modifier
javascript.validation.message.function.override.incompatible.signature=Incompatible override, should have signature ''{0}''
javascript.validation.message.function.override.incompatible.signature2=Incompatible override, should have return type ''{0}''
javascript.validation.message.interface.method.invalid.access.modifier=Incompatible implementation, should have 'public' access modifier
javascript.validation.message.interface.method.invalid.signature=Incompatible implementation, should have signature ''{0}''
javascript.validation.message.interface.method.invalid.signature2=Incompatible implementation, should have return type ''{0}''
javascript.validation.message.duplicated.catch.block=Duplicated catch block #loc
javascript.validation.message.duplicated.catch.block.fix=Remove duplicated catch block
javascript.validation.message.return.value.of.type.is.required=Return value of type {0} is required
javascript.validation.message.constructor.in.mxml.is.not.allowed=Constructor is not allowed for MXML class
javascript.fix.remove.constructor=Remove constructor
javascript.validation.message.package.shouldbe.first.statement=Package should be first statement in file
javascript.metadata=Metadata
javascript.validation.message.file.should.be.under.source.root=Object is located in file out of source root, certain functionality will not be available
javascript.validation.message.unneeded.comma=Unneeded comma
javascript.validation.message.remove.unneeded.comma.fix=Remove unneeded comma
javascript.create.event.handler.intention.name=Create Event Handler {0}
javascript.validation.message.missed.super.constructor.call=Missed superclass's constructor invokation
javascript.fix.create.constructor.invoke.super=Create constructor matching super
javascript.fix.create.invoke.super=Insert super class constructor invokation
javascript.interface.can.not.be.instantiated.message=Interface can not be instantiated
javascript.validation.message.set.method.should.be.void.or.without.type=Return type of a setter definition must be unspecified or void
javascript.validation.message.set.method.should.have.one.parameter=A setter definition must have exactly one parameter
javascript.validation.message.get.method.should.have.no.parameter=A getter definition must have no parameters
javascript.validation.message.get.method.should.be.valid.type=Return type of a getter definition should not be {0}
javascript.validation.message.access.modifier.allowed.only.for.class.members=Access modifier allowed for class members only
javascript.validation.message.namespace.allowed.only.for.class.members=Namespace allowed for class members only
javascript.validation.message.access.modifier.allowed.only.for.package.members=Only public / internal modifiers allowed for package members
javascript.validation.message.use.namespace.reference.or.access.modifier=Use namespace OR access modifier
javascript.fix.remove.access.modifier=Remove access modifier
javascript.fix.remove.namespace.reference=Remove namespace reference
javascript.incorrect.array.type.in.forin=Array key type should be String
javascript.validation.message.unexpected.type.for.rest.parameter=Rest parameter should have no type
javascript.fix.remove.type.reference=Remove type reference
javascript.validation.message.parameter.is.not.allowed.after.rest.parameter=No parameter is allowed after rest parameter
javascript.fix.remove.parameter=Remove parameter
javascript.fix.remove.initializer=Remove initializer
javascript.validation.message.parameter.should.be.initialized=Parameter should be initialized
javascript.validation.message.rest.parameter.should.not.be.initialized=Rest parameter should not be initialized
javascript.validation.message.nested.classes.are.not.allowed=Nested classes are not allowed
generate.getter.fields.bindable.properties=&Bindable properties
javascript.language.term.package=package
javascript.validation.message.arguments.with.rest.parameter='arguments' object is not available when using rest parameter

action.JavaScript.File.text=JavaScript File

this.feature.is.not.supported.by.current.language=''{0}'' is not supported by current language version